{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"About","text":"<p> <p>I'm Marcelo Trylesinski, nice to meet you! \ud83d\udc4b</p> </p> <p> I'm a software engineer from Brazil. \ud83c\udde7\ud83c\uddf7 </p> <p> I'm currently living in Utrecht, Netherlands. \ud83c\uddf3\ud83c\uddf1 </p> <p> I'm a maintainer of Starlette and Uvicorn. </p> <p> I'm also a FastAPI Expert. </p> <p>If my open source work is useful to you, consider sponsoring me. \ud83d\ude4f</p> <p> </p>"},{"location":"sponsors/","title":"Sponsors \u2764\ufe0f","text":"<p>Thank you to all my sponsors! </p> ddanier ceb10n tiangolo adamserafini chdsbd samuelcolvin Ryandaydev BryceBeagle russbiggs TheR1D encode ogabrielluiz larsyngvelundin SaboniAmine roboflow DataEnggNerd <p>Your sponsorship helps me maintain and improve these projects.</p>"},{"location":"sponsors/#why-sponsor-me","title":"Why sponsor me?","text":"<p>I'm currently maintaining several open-source projects, including Starlette and Uvicorn.</p> <p>I'm also going to Python conferences to share my knowledge about Python, FastAPI, Starlette, and other related topics.</p>"},{"location":"sponsors/#how-to-sponsor-me","title":"How to sponsor me?","text":"<p>You can sponsor me through my GitHub Sponsors page.</p>"},{"location":"talks/","title":"Talks","text":"<p>I have been sharing my knowledge about Python, FastAPI, Starlette, and other related topics.</p>"},{"location":"talks/#europython-2024-fastapi-internals","title":"EuroPython 2024: FastAPI Internals","text":""},{"location":"talks/#pycon-italy-2024-fastapi-internals-how-does-it-work","title":"PyCon Italy 2024: FastAPI Internals: How does it work?","text":""},{"location":"talks/#pycon-spain-2023-the-validation-evolution-pydantic-v2tronger","title":"PyCon Spain 2023: The validation evolution: Pydantic V2tronger","text":"<p>Download Slides </p>"},{"location":"talks/#pycon-india-2023-keynote-how-the-duck-those-packages-work","title":"PyCon India 2023: Keynote: How the duck those packages work?","text":"<p>Download Slides </p>"},{"location":"talks/#sentry-fastapi-berlin-meetup-the-history-of-fastapi","title":"Sentry + FastAPI Berlin Meetup: The History of FastAPI","text":"<p>Download Slides </p>"},{"location":"talks/#europython-2023-performance-tips-by-the-fastapi-expert","title":"EuroPython 2023: Performance tips by the FastAPI Expert","text":""},{"location":"talks/#pycon-poland-2023-keynote-chronicles-of-an-open-source-developer","title":"PyCon Poland 2023: Keynote: Chronicles of an Open Source Developer","text":""},{"location":"talks/#pycon-italy-2023-what-does-starlette-really-do-for-fastapi","title":"PyCon Italy 2023: What does Starlette really do for FastAPI?","text":""},{"location":"talks/#pygeekle22-what-does-starlette-really-do-for-fastapi","title":"PyGeekle'22: What does Starlette really do for FastAPI?","text":""},{"location":"talks/#pyjamas-2022-performance-tips-by-the-fastapi-expert","title":"Pyjamas 2022: Performance tips by the FastAPI Expert","text":""},{"location":"talks/#pycon-portugal-2022-how-to-become-a-fastapi-expert","title":"PyCon Portugal 2022: How to become a FastAPI Expert","text":""},{"location":"youtube/","title":"YouTube","text":"<p>I have a YouTube channel where I post videos about programming, software development, and other topics. You can find the channel here.</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/","title":"Understanding client disconnection in FastAPI","text":"<p>This blog post will give you a comprehensive understanding how FastAPI works when the client disconnects.</p> <p>Info</p> <p>If you want to try the code I'll be presenting, you'll need to have some packages installed:</p> <pre><code>pip install httpx fastapi uvicorn httptools uvloop\n</code></pre> <ul> <li><code>httpx</code> is going to be used as the HTTP client.</li> <li><code>uvicorn</code> is the ASGI server, and <code>httptools</code> and <code>uvloop</code> are packages used by <code>uvicorn</code>.</li> <li>You know about <code>fastapi</code>... But it's an ASGI web framework.</li> </ul>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#a-simple-request","title":"A Simple Request","text":"<p>Let's create a FastAPI application with an endpoint that takes a long time to finish its processing.</p> <p>The following endpoint just sleeps for 10 seconds, and sends a response with a 204 status code:</p> main.py<pre><code>from fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/\", status_code=204)\nasync def home() -&gt; None:\n    await anyio.sleep(10)\n</code></pre> <p>You can run this application with any ASGI server. We'll use Uvicorn because I maintain it, and it's the most popular ASGI server.</p> <p>Let's run it with <code>uvicorn main:app --reload --log-level=trace</code>.</p> <p>Tip</p> <p>The <code>--log-level=trace</code> is used to see ASGI messages, and changes in the connection status.</p> <p>Let's call this endpoint with an HTTP client, and disconnect before the server is able to send the response back.</p> client.py<pre><code>import anyio\nimport httpx\n\nasync def main() -&gt; None:\n    async with httpx.AsyncClient(base_url=\"http://localhost:8000\") as client:\n        with anyio.fail_after(1):\n            await client.get(\"/\")\n\nif __name__ == \"__main__\":\n    anyio.run(main)\n</code></pre> <p>If you run the above with <code>python client.py</code>, you'll see the following logs on the server side:</p> <pre><code>TRACE:    127.0.0.1:50953 - HTTP connection made\nTRACE:    127.0.0.1:50953 - ASGI [2] Started scope={'type': 'http', 'asgi': {'version': '3.0', 'spec_version': '2.4'}, 'http_version': '1.1', 'server': ('127.0.0.1', 8000), 'client': ('127.0.0.1', 50953), 'scheme': 'http', 'root_path': '', 'headers': '&lt;...&gt;', 'state': {}, 'method': 'GET', 'path': '/', 'raw_path': b'/', 'query_string': b''}\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.request', 'body': '&lt;0 bytes&gt;', 'more_body': False}\nTRACE:    127.0.0.1:50953 - HTTP connection lost\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.disconnect'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.start', 'status': 204, 'headers': '&lt;...&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.body', 'body': '&lt;0 bytes&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Completed\n</code></pre> <p>This may look a bit too complex, so let's go step by step here...</p> <p>The first two lines show that the client connected to the server, and that the ASGI application was called.</p> <pre><code>TRACE:    127.0.0.1:50953 - HTTP connection made\nTRACE:    127.0.0.1:50953 - ASGI [2] Started scope={'type': 'http', 'asgi': {'version': '3.0', 'spec_version': '2.4'}, 'http_version': '1.1', 'server': ('127.0.0.1', 8000), 'client': ('127.0.0.1', 50953), 'scheme': 'http', 'root_path': '', 'headers': '&lt;...&gt;', 'state': {}, 'method': 'GET', 'path': '/', 'raw_path': b'/', 'query_string': b''}\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.request', 'body': '&lt;0 bytes&gt;', 'more_body': False}\nTRACE:    127.0.0.1:50953 - HTTP connection lost\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.disconnect'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.start', 'status': 204, 'headers': '&lt;...&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.body', 'body': '&lt;0 bytes&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Completed\n</code></pre> <p>Info</p> <p>The ASGI specification determines how the server and the web framework are going to interact to process the client's request.</p> <p>When the server reads the body, it will send a <code>http.request</code> ASGI message to the ASGI application (in this case, FastAPI):</p> <pre><code>TRACE:    127.0.0.1:50953 - HTTP connection made\nTRACE:    127.0.0.1:50953 - ASGI [2] Started scope={'type': 'http', 'asgi': {'version': '3.0', 'spec_version': '2.4'}, 'http_version': '1.1', 'server': ('127.0.0.1', 8000), 'client': ('127.0.0.1', 50953), 'scheme': 'http', 'root_path': '', 'headers': '&lt;...&gt;', 'state': {}, 'method': 'GET', 'path': '/', 'raw_path': b'/', 'query_string': b''}\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.request', 'body': '&lt;0 bytes&gt;', 'more_body': False}\nTRACE:    127.0.0.1:50953 - HTTP connection lost\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.disconnect'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.start', 'status': 204, 'headers': '&lt;...&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.body', 'body': '&lt;0 bytes&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Completed\n</code></pre> <p>Then... Before the application finishes the execution, the client disconnected!</p> <pre><code>TRACE:    127.0.0.1:50953 - HTTP connection made\nTRACE:    127.0.0.1:50953 - ASGI [2] Started scope={'type': 'http', 'asgi': {'version': '3.0', 'spec_version': '2.4'}, 'http_version': '1.1', 'server': ('127.0.0.1', 8000), 'client': ('127.0.0.1', 50953), 'scheme': 'http', 'root_path': '', 'headers': '&lt;...&gt;', 'state': {}, 'method': 'GET', 'path': '/', 'raw_path': b'/', 'query_string': b''}\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.request', 'body': '&lt;0 bytes&gt;', 'more_body': False}\nTRACE:    127.0.0.1:50953 - HTTP connection lost\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.disconnect'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.start', 'status': 204, 'headers': '&lt;...&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.body', 'body': '&lt;0 bytes&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Completed\n</code></pre> <p>The server notices, and sends a <code>http.disconnect</code> message to the application.</p> <pre><code>TRACE:    127.0.0.1:50953 - HTTP connection made\nTRACE:    127.0.0.1:50953 - ASGI [2] Started scope={'type': 'http', 'asgi': {'version': '3.0', 'spec_version': '2.4'}, 'http_version': '1.1', 'server': ('127.0.0.1', 8000), 'client': ('127.0.0.1', 50953), 'scheme': 'http', 'root_path': '', 'headers': '&lt;...&gt;', 'state': {}, 'method': 'GET', 'path': '/', 'raw_path': b'/', 'query_string': b''}\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.request', 'body': '&lt;0 bytes&gt;', 'more_body': False}\nTRACE:    127.0.0.1:50953 - HTTP connection lost\nTRACE:    127.0.0.1:50953 - ASGI [2] Receive {'type': 'http.disconnect'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.start', 'status': 204, 'headers': '&lt;...&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Send {'type': 'http.response.body', 'body': '&lt;0 bytes&gt;'}\nTRACE:    127.0.0.1:50953 - ASGI [2] Completed\n</code></pre> <p>Ok... Cool! Now we finally arrive to the important point of this blog post!</p> <p>The client disconnected, the ASGI server communicated it to the application, but... Did the application stop?</p> <p>The answer is: NO. Although the application is able to check the <code>http.disconnect</code>, Starlette only does it for <code>StreamingResponses</code>, but it doesn't do it for all the other response classes by default.</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#check-client-disconnection","title":"Check Client Disconnection","text":"<p>I said above that the application is able to check, but it doesn't do it by default.</p> <p>I'll teach you how you can check when a client is disconnected.</p> <p>Note</p> <p>The current way to check client disconnection is a bit complicated. But... We are working on new mechanism that will be introduce in a future release with the goal of simplifying this flow.</p> <p>Follow me on LinkedIn and Twitter, and sponsor me on GitHub for more information. </p> <p>Let's complicate a bit our application... I'll explain everything, don't worry.</p> main.py<pre><code>from fastapi import FastAPI, Request\nimport anyio\nimport httpx\n\napp = FastAPI()\n\n\nasync def disconnected(request: Request, cancel_scope: anyio.CancelScope) -&gt; None:\n    while True:\n        message = await request.receive()\n        if message[\"type\"] == \"http.disconnect\":\n            cancel_scope.cancel()\n            break\n\n\n@app.get(\"/\", status_code=204)\nasync def home(request: Request) -&gt; None:\n    async with anyio.create_task_group() as tg:\n        tg.start_soon(disconnected, request, tg.cancel_scope)\n        await anyio.sleep(10)\n</code></pre> <p>Cool! But... What have I done? </p> <p>We've created the <code>disconnected()</code> task, that will await on <code>request.receive()</code>, and cancel the <code>anyio.TaskGroup</code> when the message <code>\"http.disconnect\"</code> is found.</p> <p>Is the logic above 100% correct? When I was writing this article, I actually thought it was, but then I remembered that I forgot a small detail... What if the client doesn't disconnect?</p> <p>Well... Then the task runs forever. So yeah, we need to actually stop the <code>TaskClient</code> when either: 1. the client disconnects or... 2. the endpoint finishes to process its logic, and is ready to send the response.</p> <p>The right logic is a bit more complex, but would be...</p> main.py<pre><code>from typing import Any, Awaitable\n\nimport anyio\nimport httpx\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\nasync def disconnected(request: Request) -&gt; None:\n    while True:\n        message = await request.receive()\n        if message[\"type\"] == \"http.disconnect\":\n            break  # (1)!\n\n\nasync def wrap(call: Awaitable[Any], cancel_scope: anyio.CancelScope):\n    await call\n    cancel_scope.cancel()  # (2)!\n\n\n@app.get(\"/\", status_code=204)\nasync def home(request: Request) -&gt; None:\n    async with anyio.create_task_group() as tg:\n        tg.start_soon(wrap, disconnected(request), tg.cancel_scope)\n        await wrap(anyio.sleep(5), tg.cancel_scope)\n</code></pre> <ol> <li>We removed the <code>cancel_scope.cancel()</code> from here.</li> <li>We added the <code>cancel_scope.cancel()</code> in the <code>wrap()</code> function.</li> </ol> <p>Now, we achieving our goal. You can try calling the <code>python client.py</code>, and you'll see it will work. You can also call the endpoint with a simple <code>curl http://localhost:8000/</code> (without disconnecting).</p> <p>After seeing all of the above, you may have some questions...</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#is-this-necessary","title":"Is this necessary?","text":"<p>I don't recommend to do it in most of cases. I'm just presenting a behavior, and explaining how to overcome it with the current mechanisms that are available.</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#is-this-the-best-way-to-do-this","title":"Is this the best way to do this?","text":"<p>For now, yes. As I said above, we are working on a new mechanism to detect if the client has disconnected.</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#what-about-websockets","title":"What about WebSockets?","text":"<p>If there's curiosity, I'll write a blog post about it as well. There are some subtle (but important) differences.</p>"},{"location":"blog/2024/06/06/understanding-client-disconnection-in-fastapi/#conclusion","title":"Conclusion","text":"<p>If you learned something useful with this blog post, consider [sponsoring me on GitHub], and/or share this blog post among your colleagues.</p> <p>If you have more ideas about what would be interesting to share, feel free to let me know on LinkedIn or Twitter.</p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/","title":"Contract Testing with HTTPX","text":"<p>Today, we are going to talk about how to achieve contract testing with HTTPX. </p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/#what-is-contract-testing","title":"What is contract testing?","text":"<p>Contract testing is a methodology for ensuring that two separate systems (such as two microservices) are compatible and are able to communicate with one other. It captures the interactions that are exchanged between each service, storing them in a contract, which can then be used to verify that both parties adhere to it. - Matt Fellows</p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/#what-is-httpx","title":"What is HTTPX?","text":"<p>HTTPX is a fully featured HTTP client for Python 3, which provides sync and async APIs, and support for both HTTP/1.1 and HTTP/2.</p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/#how-to-do-contract-testing-with-httpx","title":"How to do contract testing with HTTPX?","text":"<p>Well, to be completely transparent, I'm not sure if what you are about to read classifies as contract testing. </p> <p>The problem we'll be trying to solve is the following:</p> <p>Consider we have multiples services running, and they depend on each other. We want to make sure that a service is not able able to break another one.</p> <p>To achieve this your first thought would be \"let's write end to end tests\", but that will slow things down, as each service needs to be up to run the tests, and given that, the setup needed is a bit more complex.</p> <p>Check this blog post (which I didn't read, but looks good) for more information about E2E testing vs Contract Testing.</p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/#the-solution","title":"The solution","text":"<p>Let's assume we have two services. For obvious reasons, those services are FastAPI based. </p> <p>Note</p> <p>This can be achieved with any web framework. What matters here is that you should be using <code>httpx</code>.</p> Service AService BRun service_a.py<pre><code>import httpx\nfrom fastapi import APIRouter, FastAPI\n\nrouter = APIRouter(prefix=\"/a\")\n\n\n@router.get(\"/\")\ndef get_a():\n    return {\"a\": \"a\"}\n\n\n@router.get(\"/call_b\")\nasync def call_b():\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"http://localhost:8000/b/\")\n        return response.json()\n\n\napp = FastAPI()\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, port=8001)  # (1)!\n</code></pre> <ol> <li>The port is 8001, not 8000, to avoid conflicts with the other service.</li> </ol> service_b.py<pre><code>from fastapi import APIRouter, FastAPI\n\nrouter = APIRouter(prefix=\"/b\")\n\n\n@router.get(\"/\")\ndef get_b():\n    return {\"b\": \"b\"}\n\n\napp = FastAPI()\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, port=8000)\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install uvicorn fastapi httpx\n</code></pre> <p>Then open the terminal and run:</p> <pre><code>python service_a.py\n</code></pre> <p>Then open another terminal, and run:</p> <pre><code>python service_b.py\n</code></pre> <p>Cool. Now, let's call the <code>/a/call_b</code> endpoint:</p> <pre><code>http :8001/a/call_b # (1)!\n</code></pre> <ol> <li>The HTTP client used is called HTTPie, but you can use <code>curl</code>,     or just go to the browser, and access <code>http://localhost:8001/a/call_b</code>.</li> </ol> <p>As we see, the response is:</p> <pre><code>{\n    \"b\": \"b\"\n}\n</code></pre> <p>Now, if we want to create a test, we can do something like:</p> TestClientAsyncClientRun test_service_a.py<pre><code>import pytest\nfrom fastapi.testclient import TestClient\n\nfrom service_a import app\n\n\n@pytest.fixture()\ndef client():\n    return TestClient(app)\n\n\ndef test_call_b(client: TestClient) -&gt; None:\n    response = client.get(\"/a/call_b\")\n    assert response.status_code == 200\n    assert response.json() == {\"b\": \"b\"}\n</code></pre> <p>See more on the Starlette documentation.</p> test_service_a.py<pre><code>import httpx\nimport pytest\nimport pytest_asyncio\n\nfrom service_a import app\n\n\n@pytest_asyncio.fixture(name=\"client\")\nasync def testclient():\n    async with httpx.AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_call_b(client: httpx.AsyncClient) -&gt; None:\n    response = await client.get(\"/a/call_b\")\n    assert response.status_code == 200\n    assert response.json() == {\"b\": \"b\"}\n</code></pre> <p>See more on the Starlette documentation.</p> <p>Install the dependencies:</p> <pre><code>python -m pip install pytest pytest-asyncio httpx requests\n</code></pre> <p>Then open the terminal and run:</p> <pre><code>python -m pytest test_service_a.py\n</code></pre> <p>That works perfectly, right? </p> <p>Well, yes. But remember what I said in the beginning? </p> <p>To achieve this your first thought would be \"let's write end to end tests\", but that will slow things down, as each service needs to be up to run the tests, and given that, the setup needed is a bit more complex.</p> <p>So, what if we want to run the tests without having to run the services? </p>"},{"location":"blog/2022/11/03/contract-testing-with-httpx/#patch-the-http-client","title":"Patch the HTTP client","text":"<p>We can patch the HTTPX client to make it call the service B, without actually running the service B. </p> <p>To achieve that, we'll be using RESPX: a simple library, yet powerful, for mocking out the <code>HTTPX</code> and <code>HTTPCore</code> libraries. </p> <p>It's easy, let me show you! We just need to add a single fixture on the <code>test_service_a.py</code> file:</p> TestClientAsyncClientRun test_service_a.py<pre><code>import pytest\nimport pytest_asyncio\nimport respx\nfrom fastapi.testclient import TestClient\n\nfrom service_a import app\nfrom service_b import app as app_b\n\n\n@pytest.fixture()\ndef client():\n    return TestClient(app)\n\n\n@pytest_asyncio.fixture()\nasync def create_contracts():\n    async with respx.mock:  # (1)!\n        respx.route(host=\"localhost\", port=8000).mock(\n            side_effect=respx.ASGIHandler(app_b)\n        )\n        yield\n\n\ndef test_call_b(client: TestClient) -&gt; None:\n    response = client.get(\"/a/call_b\")\n    assert response.status_code == 200\n    assert response.json() == {\"b\": \"b\"}\n</code></pre> <ol> <li> <p>The <code>respx.mock</code> context manager is used to mock the HTTPX client. </p> <p>Read more about it on the RESPX documentation.</p> </li> </ol> test_service_a.py<pre><code>import httpx\nimport pytest\nimport pytest_asyncio\nimport respx\n\nfrom service_a import app\nfrom service_b import app as app_b\n\n\n@pytest_asyncio.fixture(name=\"client\")\nasync def testclient():\n    async with httpx.AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest_asyncio.fixture()\nasync def create_contracts():\n    async with respx.mock:  # (1)!\n        respx.route(host=\"localhost\", port=8000).mock(\n            side_effect=respx.ASGIHandler(app_b)\n        )\n        yield\n\n\n@pytest.mark.asyncio\nasync def test_call_b(client: httpx.AsyncClient) -&gt; None:\n    response = await client.get(\"/a/call_b\")\n    assert response.status_code == 200\n    assert response.json() == {\"b\": \"b\"}\n</code></pre> <ol> <li> <p>The <code>respx.mock</code> context manager is used to mock the HTTPX client. </p> <p>Read more about it on the RESPX documentation.</p> </li> </ol> <p>Install the dependencies:</p> <pre><code>python -m pip install pytest pytest-asyncio httpx respx requests\n</code></pre> <p>Then open the terminal and run:</p> <pre><code>python -m pytest test_service_a.py\n</code></pre> <p>Nice! We did it! </p> <p>Now, we can run the tests without having to run the services. </p> <p>If you are a curious person, feel free to compare the tests with the <code>time</code> command:</p> <pre><code>time python -m pytest test_service_a.py\n</code></pre> <p>Be surprised. </p> <p>Info</p> <p>You can also read the continuation of this article here.</p>"},{"location":"blog/2023/03/14/contract-testing-with-httpx---part-2/","title":"Contract Testing with HTTPX - Part 2","text":"<p>Note</p> <p>This is a continuation of Contract Testing with HTTPX.</p> <p>On the previous article, I used RESPX to call the service B from service A. Although it looks cool, we can actually achieve the same goal without using anything besides FastAPI itself.</p>"},{"location":"blog/2023/03/14/contract-testing-with-httpx---part-2/#the-services","title":"The Services","text":"<p>Let's assume that we have similar two services as presented in the previous article.</p> <p>The difference here is that we'll be creating a dependency called <code>service_b_client</code>, which is going to return a <code>httpx.AsyncClient</code> instance that calls our service B.</p> Service AService BRun service_a.py<pre><code>from typing import AsyncIterator\n\nimport httpx\nfrom fastapi import APIRouter, Depends, FastAPI\n\nrouter = APIRouter(prefix=\"/a\")\n\n\nasync def service_b_client() -&gt; AsyncIterator[httpx.AsyncClient]:\n    async with httpx.AsyncClient(base_url=\"http://localhost:8000/b/\") as client:\n        yield client\n\n\n@router.get(\"/\")\ndef get_a():\n    return {\"a\": \"a\"}\n\n\n@router.get(\"/call_b\")\nasync def call_b(client: httpx.AsyncClient = Depends(service_b_client)):\n    response = await client.get(\"/\")\n    return response.json()\n\n\napp = FastAPI()\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, port=8001)  # (1)!\n</code></pre> <ol> <li>The port is 8001, not 8000, to avoid conflicts with the other service.</li> </ol> service_b.py<pre><code>from fastapi import APIRouter, FastAPI\n\nrouter = APIRouter(prefix=\"/b\")\n\n\n@router.get(\"/\")\ndef get_b():\n    return {\"b\": \"b\"}\n\n\napp = FastAPI()\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, port=8000)\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install uvicorn fastapi httpx\n</code></pre> <p>Then open the terminal and run:</p> <pre><code>python service_a.py\n</code></pre> <p>Then open another terminal, and run:</p> <pre><code>python service_b.py\n</code></pre> <p>Now, let's call the <code>/a/call_b</code> endpoint.</p> <pre><code>http :8001/a/call_b # (1)!\n</code></pre> <ol> <li>The HTTP client used is called HTTPie, but you can use [<code>curl</code>],     or just go to the browser, and access <code>http://localhost:8001/a/call_b</code>.</li> </ol> <p>The response should look like:</p> <pre><code>{\n    \"b\": \"b\"\n}\n</code></pre>"},{"location":"blog/2023/03/14/contract-testing-with-httpx---part-2/#testing","title":"Testing","text":"<p>Since the only difference between this article, and the previous one is the creation of the dependency on service A, you might be guessing that we are going to override the dependency, and... You are right! (if you didn't, is fine as well )</p> <p>We are going to use <code>app.dependency_overrides</code> to override the <code>service_b_client</code> dependency, and instead of calling the real service B, we'll call the application itself, avoiding the network calls that would potentially slow down our test suite.</p> TestRun test.py<pre><code>from typing import AsyncIterator\n\nimport httpx\nimport pytest\n\nfrom service_a import app, service_b_client\nfrom service_b import app as app_b\n\n\nasync def service_b_client_override() -&gt; AsyncIterator[httpx.AsyncClient]:\n    async with httpx.AsyncClient(app=app_b, base_url=\"http://test/b\") as client:\n        yield client\n\n\n@pytest.fixture(name=\"client\")\nasync def testclient():\n    app.dependency_overrides[service_b_client] = service_b_client_override\n    async with httpx.AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n\n\n@pytest.mark.anyio\nasync def test_call_b(client: httpx.AsyncClient) -&gt; None:\n    response = await client.get(\"/a/call_b\")\n    assert response.status_code == 200\n    assert response.json() == {\"b\": \"b\"}\n</code></pre> <p>See more on the Starlette documentation.</p> <p>Install the dependencies:</p> <pre><code>python -m pip install pytest httpx trio\n</code></pre> <p>Then open the terminal and run:</p> <pre><code>python -m pytest test.py\n</code></pre> <p>Good! Now are able to avoid a lot of network calls, and speed up our test suite. </p>"},{"location":"blog/2022/09/20/fastapi-escape-character/","title":"FastAPI Escape Character","text":"<p>Today, we'll talk about a small feature of FastAPI that might be useful for you: the escape character. </p>"},{"location":"blog/2022/09/20/fastapi-escape-character/#what-is-the-escape-character","title":"What is the escape character?","text":"<p>The escape character <code>\\f</code> is a character that can be used to tell to FastAPI to truncate what should go to the endpoint description on the OpenAPI.</p> <p>Let's see it in practice. Consider we have the following endpoint:</p> CodeRun main.py<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef home():\n    \"\"\"This is home.\n    \\f\n    This is not on the OpenAPI.\n    \"\"\"\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install uvicorn fastapi\n</code></pre> <p>Then run <code>uvicorn</code>:</p> <pre><code>uvicorn main:app\n</code></pre> <p>When we call the <code>/openapi.json</code> endpoint:</p> <pre><code>http GET :8000/openapi.json  # (1)!\n</code></pre> <ol> <li>The HTTP client used is called HTTPie, but you can use <code>curl</code>,     or just go to the browser, and access <code>http://localhost:8000/openapi.json</code>.</li> </ol> <p>You'll see the following OpenAPI JSON on the response:</p> <pre><code>{\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"openapi\": \"3.0.2\",\n    \"paths\": {\n        \"/\": {\n            \"get\": {\n                \"description\": \"This is home.\",\n                \"operationId\": \"home__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        },\n                        \"description\": \"Successful Response\"\n                    }\n                },\n                \"summary\": \"Home\"\n            }\n        }\n    }\n}\n</code></pre> <p>Observe the \"description\" field does not contain the \"This is not on OpenAPI\" part of the docstring. The reason is the escape character we used. Everything after the <code>\\f</code> will not appear on that field.</p> <p>This feature may be useful if you are using a docstring linter tool, like darglint.</p>"},{"location":"blog/2022/09/20/fastapi-escape-character/#whats-new","title":"What's new?","text":"<p>If you are a FastAPI veteran (), you are probably familiar with the above. What you probably don't know, is that now (since FastAPI 0.82.0) it's possible to use it on the Pydantic models you use on your FastAPI application.</p> <p>Let's see another example.</p> CodeRun <p>As most of my examples, we'll use potatoes:</p> main.py<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass PotatoOutput(BaseModel):\n    \"\"\"Super potato.\n    \\f\n    This is not on the OpenAPI.\n    \"\"\"\n\n@app.get(\"/\", response_model=PotatoOutput)\ndef get_potato():\n    ...\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install uvicorn fastapi\n</code></pre> <p>Then run <code>uvicorn</code>:</p> <pre><code>uvicorn main:app\n</code></pre> <p>When we call <code>/openapi.json</code>, as we did above, we'll get the following OpenAPI JSON as response:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"PotatoOutput\": {\n                \"description\": \"Super potato.\\n\",\n                \"properties\": {},\n                \"title\": \"PotatoOutput\",\n                \"type\": \"object\"\n            }\n        }\n    },\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"openapi\": \"3.0.2\",\n    \"paths\": {\n        \"/\": {\n            \"get\": {\n                \"operationId\": \"get_potato__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/PotatoOutput\"\n                                }\n                            }\n                        },\n                        \"description\": \"Successful Response\"\n                    }\n                },\n                \"summary\": \"Get Potato\"\n            }\n        }\n    }\n}\n</code></pre> <p>Tip</p> <p>We can also use <code>jq</code> to get the part of the JSON that we are interested.</p> CallOutput <pre><code>http GET :8000/openapi.json | jq .components.schemas\n</code></pre> <pre><code>{\n    \"PotatoOutput\": {\n        \"title\": \"PotatoOutput\",\n        \"type\": \"object\",\n        \"properties\": {},\n        \"description\": \"Super potato.\\n\"\n    }\n}\n</code></pre> <p>As we can see, the description of <code>PotatoOutput</code> doesn't contain the \"This is not on the OpenAPI.\" part as well.</p> <p>Yey! Now you can use those docstring linter tools as you want with FastAPI! </p> <p>Thanks for reading this blog post! </p> <p>If you have any suggestions on what I can write about, please feel free to suggest below. </p>"},{"location":"blog/2025/01/01/2024-open-source-report/","title":"2024 Open Source Report","text":"<p>This is my first yearly report on Open Source! </p> <p>I dedicate a lot of my free time doing Open Source work, and I would like to share with you some numbers. I hope you find them interesting!</p> Project Downloads/month Time spent Releases Closed issues Merged PRs Closed unmerged PRs Answered discussions Starlette 57 million 70 hrs 29 mins 29 76 182 64 93 Uvicorn 49 million 48 hrs 3 mins 20 61 100 65 38 Python Multipart 25 million 17 hrs 29 mins 13 37 87 12 0 Total 131 million 136 hrs 1 min 62 174 369 141 131 <p>Most of the time dedicated in maintaining open source projects is actually not spent coding, as most of people think. It's mainly on interacting with people: answering questions, reviewing pull requests, and investigating issues.</p>"},{"location":"blog/2025/01/01/2024-open-source-report/#sponsors","title":"Sponsors","text":"<p>I would like to thank all the sponsors that supported me in 2024! </p>"},{"location":"blog/2025/01/01/2024-open-source-report/#data-analysis","title":"Data Analysis","text":"<p>I got this data from a script I created that queries the GitHub API and WakaTime API.</p> Click here to see the script... <p>Most of the script was created with the help of Claude AI, but I had to tweak it a bit to get the data I wanted.</p> <p>If you want to use it, make sure you have the following environment variables set:</p> <ul> <li><code>WAKATIME_API_KEY</code>: Your WakaTime API key.</li> <li><code>GH_TOKEN</code>: Your GitHub token.</li> </ul> <pre><code>import os\nimport httpx\nfrom datetime import datetime, timedelta\nfrom wakatime_client import WakatimeClient\n\n\ndef main():\n    client = WakatimeClient(api_key=os.getenv(\"WAKATIME_API_KEY\"))\n    for project in client.stats(range=\"last_year\")[\"data\"][\"projects\"]:\n        if project[\"name\"] in (\"starlette\", \"uvicorn\", \"python-multipart\"):\n            print(f'{project[\"name\"]}: {project[\"text\"]}')\n    print()\n\n    print(f\"starlette releases: {count_releases('encode', 'starlette')}\")\n    print(f\"uvicorn releases: {count_releases('encode', 'uvicorn')}\")\n    print(f\"python-multipart releases: {count_releases('Kludex', 'python-multipart')}\")\n    print()\n    print(f\"starlette stats: {get_repo_stats('encode', 'starlette')}\")\n    print(f\"uvicorn stats: {get_repo_stats('encode', 'uvicorn')}\")\n    print(f\"python-multipart stats: {get_repo_stats('Kludex', 'python-multipart')}\")\n    print()\n    print(f\"starlette activity: {get_repo_activity('encode', 'starlette')}\")\n    print(f\"uvicorn activity: {get_repo_activity('encode', 'uvicorn')}\")\n    print(f\"python-multipart activity: {get_repo_activity('Kludex', 'python-multipart')}\")\n\n\ndef count_releases(owner: str, repo: str):\n    url = f\"https://api.github.com/repos/{owner}/{repo}/releases\"\n    headers = {\"Accept\": \"application/vnd.github.v3+json\", \"Authorization\": f\"Bearer {os.getenv('GH_TOKEN')}\"}\n\n    with httpx.Client() as client:\n        response = client.get(url, headers=headers)\n        response.raise_for_status()\n\n        one_year_ago = datetime.now() - timedelta(days=365)\n        return sum(\n            1\n            for release in response.json()\n            if datetime.strptime(release[\"published_at\"], \"%Y-%m-%dT%H:%M:%SZ\") &gt; one_year_ago\n        )\n\n\ndef get_repo_stats(owner: str, repo: str):\n    headers = {\"Accept\": \"application/vnd.github.v3+json\", \"Authorization\": f\"Bearer {os.getenv('GH_TOKEN')}\"}\n\n    base_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    since = (datetime.now() - timedelta(days=365)).isoformat()\n\n    try:\n        with httpx.Client() as client:\n            # Get issues (excluding PRs)\n            issues_count = 0\n            issues_url = f\"{base_url}/issues\"\n            issues_params = {\"state\": \"closed\", \"since\": since}\n\n            issues_response = client.get(issues_url, headers=headers, params=issues_params)\n            issues_response.raise_for_status()\n\n            while issues_response.status_code == 200:\n                issues_count += sum(1 for issue in issues_response.json() if \"pull_request\" not in issue)\n\n                if \"Link\" in issues_response.headers and 'rel=\"next\"' in issues_response.headers[\"Link\"]:\n                    next_url = [\n                        link.split(\";\")[0].strip(\"&lt;&gt; \")\n                        for link in issues_response.headers[\"Link\"].split(\",\")\n                        if 'rel=\"next\"' in link\n                    ][0]\n                    issues_response = client.get(next_url, headers=headers)\n                else:\n                    break\n\n            # Get PRs\n            prs_url = f\"{base_url}/pulls\"\n            merged_count = 0\n            closed_count = 0\n\n            # First get merged PRs\n            pr_params = {\"state\": \"closed\", \"sort\": \"updated\", \"direction\": \"desc\"}\n            pr_response = client.get(prs_url, headers=headers, params=pr_params)\n            pr_response.raise_for_status()\n\n            while pr_response.status_code == 200:\n                for pr in pr_response.json():\n                    # Check if PR was updated in the last year\n                    if datetime.strptime(pr[\"updated_at\"], \"%Y-%m-%dT%H:%M:%SZ\") &lt; datetime.now() - timedelta(days=365):\n                        break\n\n                    if pr[\"merged_at\"]:\n                        merged_count += 1\n                    else:\n                        closed_count += 1\n\n                if \"Link\" in pr_response.headers and 'rel=\"next\"' in pr_response.headers[\"Link\"]:\n                    next_url = [\n                        link.split(\";\")[0].strip(\"&lt;&gt; \")\n                        for link in pr_response.headers[\"Link\"].split(\",\")\n                        if 'rel=\"next\"' in link\n                    ][0]\n                    pr_response = client.get(next_url, headers=headers)\n                else:\n                    break\n\n            return {\"closed_issues\": issues_count, \"merged_prs\": merged_count, \"closed_unmerged_prs\": closed_count}\n\n    except httpx.HTTPError as e:\n        print(f\"Error fetching repository stats: {e}\")\n        return None\n\n\ndef get_repo_activity(owner: str, repo: str):\n    headers = {\"Accept\": \"application/vnd.github.v3+json\", \"Authorization\": f\"Bearer {os.getenv('GH_TOKEN')}\"}\n\n    # GraphQL query for discussions (REST API doesn't support discussions)\n    graphql_url = \"https://api.github.com/graphql\"\n    query = \"\"\"\n    query($owner:String!, $repo:String!) {\n    repository(owner: $owner, name: $repo) {\n        discussions(first: 100, answered: true, orderBy: {field: UPDATED_AT, direction: DESC}) {\n        totalCount\n        nodes {\n            answerChosenAt\n        }\n        }\n    }\n}\n\"\"\"\n\n    with httpx.Client() as client:\n        # Get discussions via GraphQL\n        response = client.post(\n            graphql_url, json={\"query\": query, \"variables\": {\"owner\": owner, \"repo\": repo}}, headers=headers\n        )\n        response.raise_for_status()\n\n        one_year_ago = datetime.now() - timedelta(days=365)\n        data = response.json()\n\n        return sum(\n            1\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n            if datetime.strptime(discussion[\"answerChosenAt\"], \"%Y-%m-%dT%H:%M:%SZ\") &gt; one_year_ago\n        )\n\n\nmain()\n</code></pre>"},{"location":"blog/2022/09/13/fastapis-test-client/","title":"FastAPI's Test Client","text":"<p>This is my first blog post! </p> <p>Please enjoy, and let me know if you have any feedback. </p> <p>Abstract</p> <p>If you are new to FastAPI, you might benefit from reading the following:</p> <ul> <li><code>TestClient</code> origin and features</li> <li>The <code>TestClient</code> weird behavior</li> </ul> <p>If you already know stuff about FastAPI, you might jump to:</p> <ul> <li>The Future of the <code>TestClient</code></li> </ul> <p>Today, we'll talk about the main tool for testing FastAPI applications: the <code>TestClient</code>.</p>"},{"location":"blog/2022/09/13/fastapis-test-client/#testclient-origin-and-features","title":"<code>TestClient</code> origin and features","text":"<p>The <code>TestClient</code> is a feature from Starlette (one of the two main dependencies of FastAPI). On which, FastAPI only does a reimport on the <code>testclient</code> module, as we can see here.</p> <p>We can use the <code>TestClient</code> to test our WebSocket and HTTP endpoints.</p>"},{"location":"blog/2022/09/13/fastapis-test-client/#the-testclient-weird-behavior","title":"The <code>TestClient</code> weird behavior","text":"<p>Although documented on both FastAPI and Starlette's documentation, most of the people are not aware of the <code>TestClient</code>'s behavior when it comes to events. To put it simple, there are two ways of creating a <code>TestClient</code> object, and in one of those ways, the events are not executed.</p> <p>Let's see the behavior with the following FastAPI application:</p> main.py<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\nstarted = False\n\n@app.on_event(\"startup\") # (1)!\ndef startup():\n    global started\n    started = True\n\n@app.get(\"/\")\ndef home():\n    if started:\n        return {\"message\": \"STARTED\"}\n    else:\n        return {\"message\": \"NOT STARTED\"}\n</code></pre> <ol> <li> <p>There are only two events available: startup and shutdown.</p> <p>Read more about it on the ASGI documentation.</p> </li> </ol> <p>As you can see, there's a single endpoint, which gives us a different message depending on the value of the <code>started</code> variable. The <code>started</code> variable is set to <code>True</code> on the <code>startup</code> event.</p> <p>Now, let's test it with the <code>TestClient</code>:</p> CodeRun test.py<pre><code>from fastapi.testclient import TestClient\n\nfrom main import app\n\ndef test_home():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"NOT STARTED\"}\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install \"fastapi[all]\" pytest\n</code></pre> <p>Then run <code>pytest</code>: <pre><code>pytest test.py\n</code></pre></p> <p>As you can see, the above test passes. Which means the <code>startup</code> event was not triggered. </p> <p>On the other hand, if we run the following test, we'll get a different result:</p> CodeRun test.py<pre><code>from fastapi.testclient import TestClient\n\nfrom main import app\n\ndef test_home():\n    with TestClient(app):\n        response = client.get(\"/\")\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"STARTED\"}\n</code></pre> <p>Install the dependencies:</p> <pre><code>python -m pip install \"fastapi[all]\" pytest\n</code></pre> <p>Then run <code>pytest</code>: <pre><code>pytest test.py\n</code></pre></p> <p>When used as context manager, the <code>TestClient</code> will trigger the <code>startup</code> event.</p>"},{"location":"blog/2022/09/13/fastapis-test-client/#the-future-of-the-testclient","title":"The Future of the <code>TestClient</code>","text":"<p>By the moment I'm writing this blog, the latest FastAPI version is <code>0.83.0</code> with Starlette pinned on <code>0.19.1</code>. Starlette is already on version <code>0.20.3</code>, and the next release will change the internals of the <code>TestClient</code>. To be more specific, the HTTP client will be changed from <code>requests</code> to <code>httpx</code>.</p> <p>As there are some differences between the two clients, the <code>TestClient</code> will reflect the same differences.</p> <p>This change will be in Starlette on version <code>0.21.0</code>, and I'm unsure when it will land on FastAPI.</p> <p>Let's see the changes you should be aware:</p> <ol> <li><code>allow_redirects</code> will be now called <code>follow_redirects</code>.</li> <li><code>cookies</code> parameter will be deprecated under method calls (it should be used on the client instantiation).</li> <li><code>data</code> parameter will be called <code>content</code> when sending bytes or text.</li> <li><code>content_type</code> will default to \"text/plain\" when sending file instead of empty string.</li> <li>The HTTP methods DELETE, GET, HEAD and OPTIONS will not accept <code>content</code>, <code>data</code>, <code>json</code> and <code>files</code> parameters.</li> <li> <p><code>data</code> parameter doesn't accept list of tuples, instead it should be a dictionary.</p> \u274c List of Tuples\u2705 Dictionary <pre><code>client.post(..., data=[(\"key1\", \"1\"), (\"key1\", \"2\"), (\"key2\", \"3\")])\n</code></pre> <pre><code>client.post(..., data={\"key1\": [\"1\", \"2\"], \"key2\": \"3\"})\n</code></pre> </li> </ol> <p>Those changes will likely impact your test suite. Having this in mind, I've created a codemod that will help you to migrate your tests: bump-testclient. </p> <p>Here is the list of what the codemod will do:</p> <ol> <li>Replace <code>allow_redirects</code> with <code>follow_redirects</code>.</li> <li>Replace <code>data</code> with <code>content</code> when sending bytes or text.</li> <li>Replace <code>client.&lt;method&gt;(..., &lt;parameter&gt;=...)</code> by <code>client.request(\"&lt;method&gt;\", ..., &lt;parameter&gt;=...)</code> when parameter is either    <code>content</code>, <code>data</code>, <code>json</code> or <code>files</code>.</li> </ol> <p>In case you want to read more about the differences between the underneath clients, you can check the httpx documentation.</p> <p>Thanks for reading till here! </p>"},{"location":"blog/2024/05/28/uvicorn-0300-release/","title":"Uvicorn 0.30.0 Release","text":"<p>Today, we are releasing Uvicorn 0.30.0! </p> <p>There were several changes here, including:</p> <ol> <li>Deprecate the <code>uvicorn.workers</code> module #2302</li> <li>Add a new multiprocess manager #2183</li> <li>Allow <code>ConfigParser</code> or a <code>io.IO[Any]</code> on <code>log_config</code> #1976</li> </ol>"},{"location":"blog/2024/05/28/uvicorn-0300-release/#deprecate-the-uvicornworkers","title":"Deprecate the <code>uvicorn.workers</code>","text":"<p>The <code>uvicorn.workers</code> module is used to provide two classes: <code>UvicornWorker</code> and <code>UvicornH11Worker</code>.</p> <p>These classes are used to run Uvicorn with Gunicorn e.g. <code>gunicorn -k uvicorn.workers.UvicornWorker -w 4 main:app</code>.</p> <p>Gunicorn is a popular WSGI server that can run multiple worker processes to handle incoming requests. When used with Uvicorn, Gunicorn would act as a process manager and Uvicorn would act as the server handling the requests.</p> <p>However, this approach is not recommended anymore. In this release, we also introduced a new multiprocess manager on Uvicorn's side, that is meant to replace Gunicorn entirely.</p> <p>For backward compatibility, you can install the Uvicorn Worker package:</p> <pre><code>pip install uvicorn-worker\n</code></pre>"},{"location":"blog/2024/05/28/uvicorn-0300-release/#add-a-new-multiprocess-manager","title":"Add a new multiprocess manager","text":"<p>A new multiprocess manager was added to Uvicorn. The main goal is to be able to have a proper process manager that can handle multiple workers and restart them when needed.</p> <p>This was a long-awaited feature, and it's finally here! </p> <p>Nothing needs to be done from the users side, the changes are already in place when using the <code>--workers</code> parameter.</p> <p>You can see more details on the the pull request #2183.</p>"},{"location":"blog/2024/05/28/uvicorn-0300-release/#allow-configparser-or-a-ioioany-on-log_config","title":"Allow <code>ConfigParser</code> or a <code>io.IO[Any]</code> on <code>log_config</code>","text":"<p>With this change, you can now pass a <code>ConfigParser</code> programmatically to the <code>log_config</code> parameter on the <code>Uvicorn</code> class.</p> <pre><code>import configparser\nfrom uvicorn import Config, Server\n\nconfig = Config(app=..., log_config=configparser.ConfigParser())\nserver = Server(config)\n</code></pre>"},{"location":"blog/2024/05/12/managing-exceptions-in-websockets-with-fastapi/","title":"Managing Exceptions in WebSockets with FastAPI","text":"<p>In this post, we delve into the management of exceptions in WebSockets, focusing on a potent but often overlooked feature: the <code>WebSocketException</code> offered by Starlette.</p>"},{"location":"blog/2024/05/12/managing-exceptions-in-websockets-with-fastapi/#understanding-websocketexception","title":"Understanding <code>WebSocketException</code>","text":"<p>Conceptually, <code>WebSocketException</code> enables you to close a WebSocket connection with a specific code and reason by raising this exception in your WebSocket route. Here's an illustrative example:</p> <pre><code>from fastapi import FastAPI, WebSocket\nfrom fastapi.exceptions import WebSocketException\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    raise WebSocketException(code=1008, reason=\"Closing the connection...\")\n</code></pre> <p>In this instance, a <code>WebSocketException</code> is raised bearing the code <code>1008</code> and the explicit reason for closure: <code>\"Closing the connection...\"</code>.</p> <p>To run this application, first install FastAPI, Uvicorn, and WebSockets:</p> <pre><code>pip install fastapi uvicorn websockets\n</code></pre> <p>Run the application using Uvicorn:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>On opening a WebSocket connection to ws://localhost:8000/ws, you will find the connection being closed with focal code 1008 and the attributed reason.</p> <p>I use wscat for testing WebSocket connections; you can install it with the following command:</p> <pre><code>npm install -g wscat\n</code></pre> <p>A connection is opened with:</p> <pre><code>wscat -c ws://127.0.0.1:8000/ws\n</code></pre>"},{"location":"blog/2024/05/12/managing-exceptions-in-websockets-with-fastapi/#handle-custom-exceptions","title":"Handle custom exceptions","text":"<p>The <code>app.exception_handler</code> can be used to handle custom exceptions. Consider the following sample:</p> <pre><code>from fastapi import FastAPI, WebSocket\nfrom fastapi.exceptions import WebSocketException\n\napp = FastAPI()\n\nclass CustomException(Exception): ...\n\n@app.exception_handler(CustomException)\nasync def custom_exception_handler(websocket: WebSocket, exc: Exception):\n    await websocket.close(code=1008, reason=\"Custom exception\")\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    raise CustomException()\n</code></pre> <p>In this example, the client receives a WebSocket closure with code 1008 and the reason \"Custom exception\" when the <code>CustomException</code> is raised.</p> <p>Feel free to connect with me on LinkedIn for any questions or discussions on this topic.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"services/","title":"Services","text":"<p>I'm also available for consultancy and training services.</p> <p>Danger</p> <p>I'm only available outside European working hours.</p> <p>I'm currently working full-time at Pydantic. Which reminds me... Have you heard about Logfire? \ud83d\ude80</p> <p>I'm an experienced software engineer, with a focus on Python, FastAPI, and related technologies.</p> <p>I think my work says more about me than I could ever write here: check my GitHub and LinkedIn profiles.</p> <p>My services include:</p> <ul> <li>Review and audit of your codebase, architecture, and infrastructure.</li> <li>Consultancy on software architecture, design, and implementation.</li> <li>Development of new features, APIs, and applications.</li> <li>Performance optimization of your applications and infrastructure.</li> <li>Training for your team on Python, FastAPI, and related technologies.</li> <li>Workshops on Python, FastAPI, and related technologies.</li> </ul> <p>If I can help you or your team with any of these services, contact me.</p>"},{"location":"slides/asgi_innovations/","title":"Unlocking ASGI Innovations","text":""},{"location":"slides/asgi_innovations/#how-fastapi-reaps-the-benefits","title":"How FastAPI Reaps the Benefits","text":""},{"location":"slides/asgi_innovations/#the-speaker","title":"The Speaker","text":"<p>Marcelo Trylesinski</p>"},{"location":"slides/asgi_innovations/#oss-maintainer","title":"OSS Maintainer","text":"### Uvicorn  ![w:450](https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png)     ### Starlette  ![w:600](https://raw.githubusercontent.com/koddr/starlette-logo/master/src/dark/svg/starlette__full_logo__with_text__dark.svg)"},{"location":"slides/asgi_innovations/#what-is-asgi","title":"What is ASGI?","text":""},{"location":"slides/asgi_innovations/#what-is-asgi_1","title":"What is ASGI?","text":""},{"location":"slides/asgi_innovations/#why-fastapi-follows-asgi","title":"Why FastAPI follows ASGI?","text":""},{"location":"slides/asgi_innovations/#websocket-denial-response","title":"WebSocket Denial Response","text":""},{"location":"slides/asgi_innovations/#websocket-denial-response_1","title":"WebSocket Denial Response","text":""},{"location":"slides/asgi_innovations/#websocket-denial-response_2","title":"WebSocket Denial Response","text":""},{"location":"slides/asgi_innovations/#websocket-denial-response_3","title":"WebSocket Denial Response","text":""},{"location":"slides/asgi_innovations/#http-trailers","title":"HTTP Trailers","text":""},{"location":"slides/asgi_innovations/#http-trailers_1","title":"HTTP Trailers","text":""},{"location":"slides/asgi_innovations/#http-trailers_2","title":"HTTP Trailers","text":"<p>What about FastAPI?</p>"},{"location":"slides/asgi_innovations/#http-trailers_3","title":"HTTP Trailers","text":""},{"location":"slides/asgi_innovations/#http-trailers_4","title":"HTTP Trailers","text":"<p>Open Source!</p>"},{"location":"slides/asgi_innovations/#client-disconnection","title":"Client Disconnection","text":""},{"location":"slides/asgi_innovations/#client-disconnection_1","title":"Client Disconnection","text":""},{"location":"slides/asgi_innovations/#client-disconnection_2","title":"Client Disconnection","text":""},{"location":"slides/asgi_innovations/#client-disconnection_3","title":"Client Disconnection","text":"<p>Uvicorn raises <code>OSError</code> on... WebSockets!</p>"},{"location":"slides/asgi_innovations/#client-disconnection_4","title":"Client Disconnection","text":""},{"location":"slides/asgi_innovations/#client-disconnection_5","title":"Client Disconnection","text":"<p>Next steps...</p>"},{"location":"slides/asgi_innovations/#conclusion","title":"Conclusion","text":""},{"location":"slides/asgi_innovations/#bonus-fastapi-tips","title":"Bonus: FastAPI Tips","text":"<p>https://github.com/Kludex/fastapi-tips</p>"},{"location":"slides/asgi_innovations/#try-logfire-pyconpt2024","title":"Try Logfire (PYCONPT2024)! \ud83d\ude80","text":""},{"location":"slides/asgi_innovations/#thank-you","title":"Thank You!","text":"<p>www.fastapiexpert.com</p> <p> Marcelo Trylesinski  @marcelotryle  Kludex</p>"},{"location":"slides/fastapi_history/","title":"The History of FastAPI","text":""},{"location":"slides/fastapi_history/#about-me","title":"About me","text":"<p> Marcelo Trylesinski</p>"},{"location":"slides/fastapi_history/#fastapi-expert","title":"FastAPI Expert","text":""},{"location":"slides/fastapi_history/#oss-maintainer","title":"OSS Maintainer","text":"### Uvicorn  ![w:450](https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png)     ### Starlette  ![w:600](https://raw.githubusercontent.com/koddr/starlette-logo/master/src/dark/svg/starlette__full_logo__with_text__dark.svg)"},{"location":"slides/fastapi_history/#software-engineer-at-pydantic","title":"Software Engineer at Pydantic","text":""},{"location":"slides/fastapi_history/#the-history-of-fastapi_1","title":"The History of FastAPI","text":""},{"location":"slides/fastapi_history/#historical-context","title":"Historical Context","text":"<p>Django &amp; Django Rest Framework</p> <p></p>"},{"location":"slides/fastapi_history/#historical-context_1","title":"Historical Context","text":"<p>Flask &amp; Flask APISpec</p> <p></p>"},{"location":"slides/fastapi_history/#inspiration","title":"Inspiration","text":""},{"location":"slides/fastapi_history/#inspiration_1","title":"Inspiration","text":""},{"location":"slides/fastapi_history/#inspiration_2","title":"Inspiration","text":"<p>fastapi.tiangolo.com/alternatives/</p>"},{"location":"slides/fastapi_history/#the-beginning","title":"The Beginning","text":""},{"location":"slides/fastapi_history/#the-beginning_1","title":"The Beginning","text":""},{"location":"slides/fastapi_history/#contributions-to-starlette","title":"Contributions to Starlette","text":""},{"location":"slides/fastapi_history/#contributions-to-pydantic","title":"Contributions to Pydantic","text":""},{"location":"slides/fastapi_history/#the-first-commit","title":"The First Commit","text":""},{"location":"slides/fastapi_history/#pydantic-v1-release","title":"Pydantic V1 Release","text":""},{"location":"slides/fastapi_history/#pydantic-v1-release_1","title":"Pydantic V1 Release","text":""},{"location":"slides/fastapi_history/#pydantic-v1-release_2","title":"Pydantic V1 Release","text":""},{"location":"slides/fastapi_history/#i-found-about-fastapi","title":"I Found about FastAPI!","text":""},{"location":"slides/fastapi_history/#i-found-about-fastapi_1","title":"I Found about FastAPI","text":""},{"location":"slides/fastapi_history/#debug-fastapi-on-vscode","title":"Debug FastAPI on VSCode","text":""},{"location":"slides/fastapi_history/#i-joined-encode","title":"I joined Encode","text":""},{"location":"slides/fastapi_history/#i-joined-encode_1","title":"I joined Encode","text":""},{"location":"slides/fastapi_history/#i-joined-encode_2","title":"I joined Encode","text":""},{"location":"slides/fastapi_history/#i-start-helping-with","title":"I start helping with...","text":""},{"location":"slides/fastapi_history/#anyio-support","title":"AnyIO Support","text":""},{"location":"slides/fastapi_history/#life-changes","title":"Life Changes","text":""},{"location":"slides/fastapi_history/#fastapi-django","title":"FastAPI &amp; Django","text":""},{"location":"slides/fastapi_history/#pydantic-announces-the-company","title":"Pydantic announces the company","text":""},{"location":"slides/fastapi_history/#sebastian-can-focus-on-fastapi","title":"Sebasti\u00e1n can focus on FastAPI","text":""},{"location":"slides/fastapi_history/#pydantic-v2-released","title":"Pydantic V2 Released","text":""},{"location":"slides/fastapi_history/#star-history","title":"Star History","text":""},{"location":"slides/fastapi_history/#what-about-the-future","title":"What about the Future?","text":""},{"location":"slides/fastapi_history/#thank-you","title":"Thank You!","text":"<p>FastAPIExpert.com</p> <p></p> <p> Marcelo Trylesinski  @marcelotryle  Kludex</p>"},{"location":"slides/how_the_duck_those_web_packages_work/","title":"How the duck those packages work?","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#about-me","title":"About me","text":"<p>Marcelo Trylesinski</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#fastapi-expert","title":"FastAPI Expert","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#oss-maintainer","title":"OSS Maintainer","text":"### Uvicorn  ![w:450](https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png)     ### Starlette  ![w:600](https://raw.githubusercontent.com/koddr/starlette-logo/master/src/dark/svg/starlette__full_logo__with_text__dark.svg)"},{"location":"slides/how_the_duck_those_web_packages_work/#software-engineer-at-pydantic","title":"Software Engineer at Pydantic","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#motivation","title":"Motivation","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#understand-how-things-are-connected","title":"Understand how things are connected","text":"<p>This is the goal for today!</p> <p></p>"},{"location":"slides/how_the_duck_those_web_packages_work/#who-is-the-server","title":"Who is the server?","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#lets-learn-how-things-happen","title":"Let's learn how things happen!","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#client-initiates-the-connection","title":"Client initiates the connection","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#server-creates-a-task-connection","title":"Server creates a task (connection)","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#uvicorn-implements-asyncioprotocol","title":"Uvicorn implements <code>asyncio.Protocol</code>","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#connection_made-is-called","title":"<code>connection_made</code> is called","text":"<p>https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseProtocol.connection_made</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#data_receive-is-called","title":"<code>data_receive</code> is called","text":"<p>https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol.data_received</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#h11-is-a-sans-io-protocol-library","title":"<code>h11</code> is a Sans-IO protocol library","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#httptools-is-a-callback-based-library","title":"<code>httptools</code> is a callback based library","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#server-will-receive-the-request","title":"Server will receive the request","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#two-things-can-happen","title":"Two things can happen","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#1-create-the-http-connection-scope","title":"1. Create the \"HTTP connection Scope\"","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#2-upgrade-the-connection","title":"2. Upgrade the connection","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#create-the-http-connection-scope","title":"Create the \"HTTP connection Scope\"","text":"<p><code>headers</code>, <code>path</code>, <code>method</code>, <code>query_string</code>, etc.</p> <p>https://asgi.readthedocs.io/en/latest/specs/www.html#http-connection-scope</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#or-server-will-upgrade-the-connection","title":"Or... Server will upgrade the connection","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#server-will-run-the-application","title":"Server will run the application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#server-will-communicate-with-the-application-via-asgi-events","title":"Server will communicate with the application via ASGI events","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#whats-asgi","title":"What's ASGI?","text":"<p>https://asgi.readthedocs.io/en/latest/</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#simple-asgi-application","title":"Simple ASGI application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#echo-asgi-application","title":"Echo ASGI application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#fastapi-is-an-asgi-application","title":"FastAPI is an ASGI application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#fastapi-is-an-asgi-application_1","title":"FastAPI is an ASGI application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#starlette-is-an-asgi-application","title":"Starlette is an ASGI application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#middleware-asgi-application","title":"Middleware &amp; ASGI Application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#middleware-asgi-application_1","title":"Middleware &amp; ASGI Application","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#starlette-does-the-routing","title":"Starlette does the routing","text":"<p><code>Starlette</code> -&gt; <code>Router</code> -&gt; <code>Route</code></p>"},{"location":"slides/how_the_duck_those_web_packages_work/#the-endpoint-is-called","title":"The endpoint is called","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#dependency-injection","title":"Dependency Injection","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#the-data-is-validated","title":"The data is validated","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#what-is-pydantic","title":"What is Pydantic?","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#come-to-me-to-get-my-card-to-get-early-access-to-the-product-we-are-building","title":"Come to me to get my card, to get early access to the product we are building!","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#endpoint-function-runs","title":"Endpoint function runs","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#data-will-be-validated-on-output","title":"Data will be validated on output","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#middlewares-again","title":"Middlewares again","text":"<p>Remember?</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#the-application-sends-events-to-the-asgi-server","title":"The application sends events to the ASGI server","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#asgi-server-makes-sure-the-asgi-application-complies-to-the-spec","title":"ASGI server makes sure the ASGI application complies to the spec","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#server-sends-data-to-the-client","title":"Server sends data to the client","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#what-now","title":"What now?","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#task-will-stay-alive-for-a-while","title":"Task will stay alive for a while","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#connection-object-is-closed","title":"Connection object is closed","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#thats-it","title":"That's it!","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#support-for-websockets","title":"Support for WebSockets","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#support-for-lifespan-events","title":"Support for Lifespan Events","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#what-happens-on-shutdown","title":"What happens on shutdown?","text":""},{"location":"slides/how_the_duck_those_web_packages_work/#where-to-go-from-here","title":"Where to go from here?","text":"<ol> <li>Help on issues</li> <li>Watch your favorite packages on GitHub</li> </ol>"},{"location":"slides/how_the_duck_those_web_packages_work/#predicting-questions","title":"Predicting questions...","text":"<p>Starlette/FastAPI/Uvicorn V1</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#predicting-questions_1","title":"Predicting questions...","text":"<p>Will you come to India if you get invited next year?</p> <p>Yes.</p>"},{"location":"slides/how_the_duck_those_web_packages_work/#thank-you","title":"Thank You!","text":"<p>FastAPIExpert.com</p> <p></p> <p> Marcelo Trylesinski  @marcelotryle  Kludex</p>"},{"location":"slides/internals/","title":"FastAPI Internals","text":""},{"location":"slides/internals/#the-speaker","title":"The Speaker","text":"<p>Marcelo Trylesinski</p>"},{"location":"slides/internals/#oss-maintainer","title":"OSS Maintainer","text":"### Uvicorn  ![w:450](https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png)     ### Starlette  ![w:600](https://raw.githubusercontent.com/koddr/starlette-logo/master/src/dark/svg/starlette__full_logo__with_text__dark.svg)"},{"location":"slides/internals/#what-is-fastapi","title":"What is FastAPI?","text":""},{"location":"slides/internals/#how-do-i-run-fastapi","title":"How do I run FastAPI?","text":"<p><code>uvicorn main:app</code> or...</p> <p>www.uvicorn.org</p>"},{"location":"slides/internals/#how-do-i-run-fastapi_1","title":"How do I run FastAPI?","text":"<p><code>hypercorn main:app</code> or...</p> <p>github.com/pgjones/hypercorn</p>"},{"location":"slides/internals/#how-do-i-run-fastapi_2","title":"How do I run FastAPI?","text":"<p><code>granian main:app</code></p> <p>github.com/emmett-framework/granian</p>"},{"location":"slides/internals/#how-the-interactions-happen","title":"How the interactions happen?","text":""},{"location":"slides/internals/#lets-focus-on","title":"Let's focus on...","text":""},{"location":"slides/internals/#but-how-it-really-happens","title":"But... How it really happens?","text":""},{"location":"slides/internals/#asgi-application","title":"ASGI application","text":"<pre><code>Scope = Dict[str, Any]\nReceive = Callable[[], Awaitable[Dict[str, Any]]]\nSend = Callable[[Dict[str, Any]], Awaitable[None]]\n\nasync def app(scope: Scope, receive: Receive, send: Send):\n    ...\n</code></pre>"},{"location":"slides/internals/#simplest-asgi-application","title":"Simplest ASGI application","text":"<pre><code>async def app(scope, receive, send):\n    body = b\"Hello world!\"\n    headers = [(b\"content-type\", b\"text/plain\"), (b\"content-length\", str(len(body)).encode())]\n\n    await send({\"type\": \"http.response.start\", \"status\": 200, \"headers\": headers})\n    await send({\"type\": \"http.response.body\", \"body\": body})\n</code></pre>"},{"location":"slides/internals/#after-the-connection-is-established","title":"After the connection is established...","text":""},{"location":"slides/internals/#if-the-client-sends-a-body","title":"If the client sends a body...","text":""},{"location":"slides/internals/#then-its-the-applications-turn","title":"Then... It's the application's turn!","text":""},{"location":"slides/internals/#middleware-stack","title":"Middleware Stack","text":""},{"location":"slides/internals/#middleware-stack_1","title":"Middleware Stack","text":"<pre><code>from fastapi import FastAPI\nfrom src.middleware import CustomMiddleware, AnotherCustomMiddleware\n\napp = FastAPI()\napp.add_middleware(CustomMiddleware)\napp.add_middleware(AnotherCustomMiddleware)\n</code></pre>"},{"location":"slides/internals/#middleware-stack_2","title":"Middleware Stack","text":""},{"location":"slides/internals/#routing","title":"Routing","text":""},{"location":"slides/internals/#routing_1","title":"Routing","text":""},{"location":"slides/internals/#dependency-injection","title":"Dependency Injection","text":""},{"location":"slides/internals/#dependency-injection_1","title":"Dependency Injection","text":""},{"location":"slides/internals/#dependency-injection_2","title":"Dependency Injection","text":"### Async  <pre><code>async def dependency():\n    return \"Hello, World!\"\n</code></pre>   ### Sync  <pre><code>def dependency():\n    return \"Hello, World!\"\n</code></pre>   ---  ## Input/Output Validation  <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Input(BaseModel):\n    name: str\n    age: int\n\nclass Output(Input):\n    id: int\n\n@app.post(\"/\")\nasync def read_item(input: Input) -&gt; Output:\n    return await database_insert(input)\n</code></pre>  ---  ## Input/Output Validation  ![w:900](assets/validation.png)  ---  ## WebSockets  ![w:800](assets/websocket-fastapi.png)    ---  ## WebSockets  ![w:800](assets/websocket-data.png)  ---  ## Async vs Sync  When should I use...    ---  ## Bonus: FastAPI Tips  https://github.com/Kludex/fastapi-tips  ---  ## Try Logfire! \ud83d\ude80  ![w:800](assets/logfire.png)  ---  # Thank You!  [www.fastapiexpert.com](https://www.fastapiexpert.com)    Marcelo Trylesinski  @marcelotryle  Kludex"},{"location":"slides/pydantic_v2tronger/","title":"The validation evolution","text":""},{"location":"slides/pydantic_v2tronger/#pydantic-v2tronger","title":"Pydantic V2tronger","text":""},{"location":"slides/pydantic_v2tronger/#about-me","title":"About me","text":"<p>Marcelo Trylesinski</p>"},{"location":"slides/pydantic_v2tronger/#fastapi-expert","title":"FastAPI Expert","text":""},{"location":"slides/pydantic_v2tronger/#oss-maintainer","title":"OSS Maintainer","text":"### Uvicorn  ![w:450](https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png)     ### Starlette  ![w:600](https://raw.githubusercontent.com/koddr/starlette-logo/master/src/dark/svg/starlette__full_logo__with_text__dark.svg)"},{"location":"slides/pydantic_v2tronger/#software-engineer-at-pydantic","title":"Software Engineer at Pydantic","text":""},{"location":"slides/pydantic_v2tronger/#what-is-pydantic","title":"What is Pydantic?","text":""},{"location":"slides/pydantic_v2tronger/#what-is-pydantic_1","title":"What is Pydantic?","text":""},{"location":"slides/pydantic_v2tronger/#whats-this-talk-about","title":"What's this talk about?","text":""},{"location":"slides/pydantic_v2tronger/#why-did-we-create-v2","title":"Why did we create V2?","text":""},{"location":"slides/pydantic_v2tronger/#pydantic-core","title":"Pydantic Core","text":"<p>github.com/pydantic/pydantic-core</p>"},{"location":"slides/pydantic_v2tronger/#lets-go-through-some-changes","title":"Let's go through some changes","text":""},{"location":"slides/pydantic_v2tronger/#config-model_config","title":"<code>Config</code> -&gt; <code>model_config</code>","text":""},{"location":"slides/pydantic_v2tronger/#config-model_config_1","title":"<code>Config</code> -&gt; <code>model_config</code>","text":""},{"location":"slides/pydantic_v2tronger/#which-settings-changed","title":"Which settings changed?","text":""},{"location":"slides/pydantic_v2tronger/#changes-on-validators","title":"Changes on validators","text":""},{"location":"slides/pydantic_v2tronger/#validator-field_validator","title":"<code>@validator</code> -&gt; <code>@field_validator</code>","text":""},{"location":"slides/pydantic_v2tronger/#changes-on-validators_1","title":"Changes on validators","text":""},{"location":"slides/pydantic_v2tronger/#validator-field_validator_1","title":"<code>@validator</code> -&gt; <code>@field_validator</code>","text":""},{"location":"slides/pydantic_v2tronger/#validation-mode-before","title":"Validation mode (<code>before</code>)","text":""},{"location":"slides/pydantic_v2tronger/#validation-mode-before_1","title":"Validation mode (<code>before</code>)","text":""},{"location":"slides/pydantic_v2tronger/#validation-mode-wrap","title":"Validation mode (<code>wrap</code>)","text":""},{"location":"slides/pydantic_v2tronger/#validation-mode-after","title":"Validation mode (<code>after</code>)","text":""},{"location":"slides/pydantic_v2tronger/#changes-on-validators_2","title":"Changes on validators","text":""},{"location":"slides/pydantic_v2tronger/#root_validator-model_validator","title":"<code>@root_validator</code> -&gt; <code>@model_validator</code>","text":""},{"location":"slides/pydantic_v2tronger/#__root__-rootmodel","title":"<code>__root__</code> -&gt; <code>RootModel</code>","text":""},{"location":"slides/pydantic_v2tronger/#__root__-rootmodel_1","title":"<code>__root__</code> -&gt; <code>RootModel</code>","text":""},{"location":"slides/pydantic_v2tronger/#typeadapter","title":"<code>TypeAdapter</code>","text":""},{"location":"slides/pydantic_v2tronger/#pydanticbasesettings-pydantic_settingsbasesettings","title":"<code>pydantic.BaseSettings</code> -&gt; <code>pydantic_settings.BaseSettings</code>","text":"<p>github.com/pydantic/pydantic-settings</p>"},{"location":"slides/pydantic_v2tronger/#modify-the-json-schema","title":"Modify the JSON schema","text":""},{"location":"slides/pydantic_v2tronger/#modify-the-json-schema_1","title":"Modify the JSON schema","text":""},{"location":"slides/pydantic_v2tronger/#custom-types","title":"Custom Types","text":""},{"location":"slides/pydantic_v2tronger/#custom-types_1","title":"Custom Types","text":""},{"location":"slides/pydantic_v2tronger/#pydantic-extra-types","title":"Pydantic Extra Types","text":"<p>https://github.com/pydantic/pydantic-extra-types</p>"},{"location":"slides/pydantic_v2tronger/#performance-tips","title":"Performance Tips","text":"<p>Use <code>model_validate_json()</code>, and not <code>model_validate(json.loads())</code></p> <p></p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_1","title":"Performance Tips","text":"<p><code>TypeAdapter</code> instantiated once</p> <p></p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_2","title":"Performance Tips","text":"<p><code>TypeAdapter</code> instantiated once</p> <p></p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_3","title":"Performance Tips","text":"<p>Don't do validation when you don't have to - use <code>Any</code></p> <p></p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_4","title":"Performance Tips","text":"<p>Use <code>Literal</code>, not <code>Enum</code></p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_5","title":"Performance Tips","text":"<p>Use <code>TypedDict</code> over nested models</p>"},{"location":"slides/pydantic_v2tronger/#performance-tips_6","title":"Performance Tips","text":"<p>https://docs.pydantic.dev/latest/concepts/performance</p>"},{"location":"slides/pydantic_v2tronger/#is-v3-planned","title":"Is V3 planned?","text":""},{"location":"slides/pydantic_v2tronger/#where-to-see-more-about-it","title":"Where to see more about it?","text":"<p>https://docs.pydantic.dev/latest/migration/</p>"},{"location":"slides/pydantic_v2tronger/#early-access-to-our-product","title":"Early Access to our Product!","text":"<p>Talk to me to get my business card.</p>"},{"location":"slides/pydantic_v2tronger/#follow-me-on-youtube","title":"Follow me on YouTube","text":"<p>The FastAPI Expert</p>"},{"location":"slides/pydantic_v2tronger/#thank-you","title":"Thank You!","text":"<p>FastAPIExpert.com</p> <p></p> <p> Marcelo Trylesinski  @marcelotryle  Kludex</p>"},{"location":"blog/category/open-source/","title":"Open Source","text":""},{"location":"blog/category/fastapi/","title":"FastAPI","text":""},{"location":"blog/category/starlette/","title":"Starlette","text":""},{"location":"blog/category/uvicorn/","title":"Uvicorn","text":""},{"location":"blog/category/websockets/","title":"WebSockets","text":""},{"location":"blog/category/testing/","title":"Testing","text":""}]}